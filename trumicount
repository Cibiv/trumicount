#!/usr/bin/env Rscript

# ******************************************************************************
# *** Arguments Definition *****************************************************
# ******************************************************************************
VERSION <- "0.9.7.3"
DOCSTRING <- paste0('
Usage: trumicount (--input-bam INBAM | --input-umitools-group-out GROUPSINTAB | --input-umis UMISINTAB) [options]

Version ', VERSION, '

Options:
--input-bam INBAM                      read UMIs from INBAM (uses `umi_tools group`)
--input-umitools-group-out GROUPSINTAB read UMIs from GROUPSINTAB produced by `umi_tools group`
--input-umis UMISINTAB                 read UMIs from UMISINTAB (previously produced by --output-umis)
--output-counts COUNTSTAB              write bias-corrected per-gene counts and models to COUNTSTAB
--output-umis UMISTAB                  write UMIs reported by `umi_tools group` to UMISTAB
--output-final-umis FINALUMISTAB       write strand-combined and filtered UMIs to FINALUMISTAB
--output-plots PLOT                    write diagnostic plots in PDF format to PLOT
--output-genewise-fits GENEFITSTAB     write gene-wise model details to GENEFITSTAB
--umitools UMITOOLS                    use executable UMITOOLS to run `umi_tools group` [Default: umi_tools]
--umitools-option UMITOOLSOPT          pass UMITOOLSOPT to `umi_tools group` (see `umi_tools group --help`)
--umi-sep UMISEP                       assume UMISEP separates read name and UMI (passed to umi_tools) [Default: :]
--umipair-sep UMIPAIRSEP               assume UMIPAIRSEP separates read1 and read2 UMI (see Strand UMIs) [Default: ]
--paired                               assume BAM file contains paired reads (passed to umi_tools) [Default: FALSE]
--mapping-quality MAPQ                 ignored read with mapping quality below MAPQ (passed to umi_tools) [Default: 20]
--filter-strand-umis                   filtes UMIs where only one strands was observed [Default: FALSE]
--combine-strand-umis                  combine UMIs strand pairs (implies --filter-strand-umis) [Default: FALSE]
--threshold THRESHOLD                  remove UMIs with fewer than THRESHOLD reads [Default: 2]
--molecules MOLECULES                  assume UMIs are initially represented by MOLECULES copies (strands) [Default: 2]
--genewise-min-umis MINUMIS            use global estimates for genes with fewer than MINUMIS (strand) UMIs [Default: 5]
--cores CORES                          spread gene-wise model fitting over CORES cpus [Default: 1]
--variance-estimator VAREST            use VAREST to estimate variances, can be "lsq" or "mle" [Default: lsq]
--plot-hist-bin PLOTXBIN               make read count histogram bins PLOTXBIN wide
--plot-hist-xmax PLOTXMAX              limit read count histogram plot to at most PLOTXMAX reads per UMI
--plot-skip-phantoms                   do not show phantom UMIs in histogram plot [Default: FALSE]
--plot-var-bins PLOTVARBINS            plot PLOTVARBINS separate emprirical variances [Default: 10]
--plot-var-logy                        use log scale for the variance (y) axis [Default: FALSE]
--verbose                              enable verbose output
')
OPTS.INVALID <- list(
  `input-bam`=c('input-umitools-group-out', 'input-umis'),
  `input-umitools-group-out`=c('input-bam', 'input-umis'),
  `input-umis`=c('input-bam', 'input-umitools-group-out')
)

# ******************************************************************************
# *** AWK Programm to post-process umi_tools output  ***************************
# ******************************************************************************
# The AWK program to transfrom the output of "umitools group" into a table of grouped UMIs
# We (crudely) remove newlines and comments, since we pass the program as a command-line
# argument to awk
GROUPOUT2UMIS.AWK <- gsub("\\s*(#.*)?\\n\\s*", "", perl=TRUE, '
BEGIN {
  gidp=-1;  # Prev. group id
  numis=1;  # Distinct # of raw UMIs
  lp="";    # Prev. line
  umip="";  # Prev. raw UMI
  FS="\\t";
  print "gene" "\\t" "sample" "\\t" "pos" "\\t" "end" "\\t" "umi" "\\t" "rawumis" "\\t" "reads";
}
NR==1 {
  # Locate columns
  Iread_id=Icontig=Iposition=Iposition2=Igene=Iumi=Iumi_count=Ifinal_umi=Ifinal_umi_count=Iunique_id=-1;
  for (i=1;i<=NF;i++) {
    switch ($i) {
      case "read_id": Iread_id=i; break;
      case "contig": Icontig=i; break;
      case "position": Iposition=i; break;
      case "position2": Iposition2=i; break;
      case "gene": Igene=i; break;
      case "umi": Iumi=i; break;
      case "umi_count": Iumi_count=i; break;
      case "final_umi": Ifinal_umi=i; break;
      case "final_umi_count": Ifinal_umi_count=i; break;
      case "unique_id": Iunique_id=i; break;
    }
  }
}
NR>1 {
  # Store because $0 might be reset below
  l=$0;
  gid=$Iunique_id;
  umi=$Iumi;
  if (gidp==-1) {
    # First line, skip
  }
  else if (gid!=gidp) {
    # Group changed, output previous group
    $0=lp; # Switch back to (last line of) previous group
    print ($Igene=="NA"?$Icontig:$Igene) "\\t" "" "\\t" $Iposition "\\t" (Iposition2>0?$Iposition2:"NA") "\\t" $Ifinal_umi "\\t" numis "\\t" $Ifinal_umi_count;
    numis=1;
  }
  else if (umi!=umip) {
    # Raw UMI changed within group
    numis+=1;
  }
  # Remember prev. line, group id and UMI
  lp=l;
  gidp=gid;
  umip=umi
}
END {
  # Output last group
  $0=lp;
  print ($Igene=="NA"?$Icontig:$Igene) "\\t" "" "\\t" $Iposition "\\t" (Iposition2>0?$Iposition2:"NA") "\\t" $Ifinal_umi "\\t" numis "\\t" $Ifinal_umi_count;
}
')

# ******************************************************************************
# *** Utilities  ***************************************************************
# ******************************************************************************
GZEXT <- "\\.(gz|gzip2)$"
BZ2EXT <- "\\.(bz2|bzip2)$"

open_byext <- function(path, ...) {
  if (grepl(GZEXT, path))
    gzfile(path, ...)
  else if (grepl(BZ2EXT, path))
    bzfile(path, ...)
  else
    file(path, ...)
}

# ******************************************************************************
# *** Parse arguments **********************************************************
# ******************************************************************************
ARGS <- docopt::docopt(DOCSTRING, strip_names=TRUE)
ARGS$`mapping-quality` <- as.integer(ARGS$`mapping-quality`)
ARGS$`strand-umis` <- (ARGS$`filter-strand-umis` || ARGS$`combine-strand-umis`)
ARGS$threshold <- as.integer(ARGS$threshold)
ARGS$molecules <- as.integer(ARGS$molecules)
ARGS$cores <- as.integer(ARGS$cores)
ARGS$`plot-hist-bin` <- if (!is.null(ARGS$`plot-hist-bin`)) as.integer(ARGS$`plot-hist-bin`) else NULL
ARGS$`plot-hist-xmax` <- if (!is.null(ARGS$`plot-hist-xmax`)) as.numeric(ARGS$`plot-hist-xmax`) else NULL
ARGS$`plot-var-bins` <- if (!is.null(ARGS$`plot-var-bins`)) as.numeric(ARGS$`plot-var-bins`) else NULL
ARGS$`variance-estimator` <- match.arg(ARGS$`variance-estimator`, c('mle', 'lsq'))
ARGS$`var-est-distfree` <- (ARGS$`variance-estimator` == 'lsq')
if (ARGS$verbose)
  print(list(`Command Line Arguments`=ARGS))
if (ARGS$cores > 1) {
  message('*** Loading library `parallel` to allow computations on ', ARGS$cores, ' cores')
  library(parallel)
}

# ******************************************************************************
# *** Create connection to read grouped UMI table from *************************
# ******************************************************************************
umis_con <- if (!is.null(ARGS$`input-umis`)) {
  # Simple read grouped UMI table from file as-is
  if (sum(!sapply(ARGS[OPTS.INVALID$`input-umis`], is.null)) > 0)
    stop('--input-umis is incompatible with ', paste(OPTS.INVALID$`input-umis`, collapse=', '))

  # Table will be read from this file connection
  open_byext(ARGS$`input-umis`, open='r')
} else {
  # Grouped UMI table must be created
  cmds <- list()

  if (!is.null(ARGS$`input-bam`)) {
    # Input is BAM File, we use umi_tools to group similar UMIs. It outputs a line per read,
    # but indicates which reads belong to the same UMI group.
    cmds[[length(cmds)+1]] <- paste(shQuote(ARGS$`umitools`), 'group', '--group-out /dev/stdout',
                                    '-I', shQuote(ARGS$`input-bam`),
                                    '-L', ifelse(ARGS$verbose, '/dev/stderr', '/dev/null'),
                                    '--umi-sep', shQuote(ARGS$`umi-sep`),
                                    ifelse(ARGS$paired, '--paired', ''),
                                    '--mapping-quality', ARGS$`mapping-quality`,
                                    paste(shQuote(ARGS$`umitools-option`), collapse=' '), sep=' ')
  }
  else if (!is.null(ARGS$`input-umitools-group-out`)) {
    # Input is the raw 'umitools group' output. 
    if (sum(!sapply(ARGS[OPTS.INVALID$`input-umitools-group-out`], is.null)) > 0)
      stop('--input-umitools-group-out is incompatible with ', paste(OPTS.INVALID$`input-umitools-group-out`, collapse=', '))
    tool <- if (grepl(GZEXT, path)) 'zcat'
    else if (grepl(BZ2EXT, path)) 'bzcat'
    else 'cat'
    cmds[[length(cmds)+1]] <- paste(tool, shQuote(ARGS$`input-umitools-group-out`), sep=' ')
  }

  # Reduce 'umitools group' output to a single line per group. 
  cmds[[length(cmds)+1]] <- paste('awk', shQuote(GROUPOUT2UMIS.AWK), sep=' ')

  # If requested, save the grouped UMI table. The table can later be loaded directly
  # using --input-umis
  if (!is.null(ARGS$`output-umis`)) {
    # Materialize table, then read back
    tool <- if (grepl(GZEXT, ARGS$`output-umis`)) 'gzip --stdout'
    else if (grepl(BZ2EXT, ARGS$`output-umis`)) 'bzip2 --stdout'
    else 'cat'
    cmds[[length(cmds)+1]] <- paste(tool, '>', shQuote(ARGS$`output-umis`), sep=' ')
    message('*** Using umi_tools to extract UMI, writing table to ', ARGS$`output-umis`)
    if (ARGS$verbose)
      cat(paste0('Command: ', paste(cmds, collapse=" |\n         "), "\n"))
    system(paste(cmds, collapse=' | '))

    # Table will be read from the created file
    open_byext(ARGS$`output-umis`, open='r')
  } else {
    # Table will be read from this pipe
    message('*** Using umi_tools to extract UMIs')
    if (ARGS$verbose) {
      cat(paste0('Command: ', paste(cmds, collapse=" |\n         "), "\n"))
    }
    pipe(paste(cmds, collapse=' | '), open='r')
  }
}

# ******************************************************************************
# *** Read table using connection established above ****************************
# ******************************************************************************
library(data.table)
message('*** Reading UMI table')
umis <- data.table(read.table(umis_con, header=TRUE, sep="\t",
                              colClasses=c(gene='factor', sample='factor',
                                           pos='numeric', end='numeric', umi='character',
                                           rawumis='numeric', 'reads'='numeric')))
close(umis_con)
message('Found ', nrow(umis), ' UMIs for ', length(levels(umis$gene)), ' genes in ',
        length(unique(umis$sample)), ' samples after grouping of similar UMIs')

# ******************************************************************************
# *** Combine and/or filter UMI strand pairs stemming a single fragment ********
# ******************************************************************************
# In combine-strand mode, UMIs that correspond to the two strands of a single
# template molecule are joined together (this requires Y-shaped adapter which
# allow the PCR products of the two strands to be distinguished). Such pairs
# are recognized by their "reciprocity" -- first and second read of the mate
# pair are swapped, INCLUDING the UMIs found on these reads.
if (ARGS$`strand-umis`) {
  # Usually, molecules should be set to 1 since UMIs are initially represented by
  # only a single strand
  if (ARGS$molecules != 1)
    warning(paste0('Number of molecules is ', ARGS$molecules, ', yet for ',
                   '--filter-strand-umis and --combine-strand-umis setting ',
                   '--molecules 1 is usually correct'))
  umis.m <- if (ARGS$`umipair-sep` != '') {
    # Split at specified umi pair separator
    umis[,list(gene, sample, pos=end, end=pos,
               umi=as.character(unlist(lapply(FUN=function(e) {paste(rev(e), collapse=ARGS$`umipair-sep`)},
                                              strsplit(umi, ARGS$`umipair-sep`, fixed=TRUE)))),
               reads=reads) ]
  } else {
    # Split in the middle
    if (any(nchar(umis$umi) %% 2 != 0))
      stop('If no umi pair separator is specified, umis are split in the middle and must have even length')
    umis[,list(gene, sample, pos=end, end=pos,
               umi=paste0(substr(umi, nchar(umi)/2+1, nchar(umi)), substr(umi, 1, nchar(umi)/2)),
               reads=reads) ]
  }
}
if (ARGS$`combine-strand-umis`) {
  # For each reciprocal UMI pair, we keep only the one where the first read
  # maps in forward direction, and (arbitrarily?) call it the one mapping to
  # the plus strand. We keep the strand-specific read counts in two columns,
  # reads.plus and reads.minus, and set the overall read count to the sum of
  # the two.
  message('*** Merging UMIs belonging to the two strands of a single template molecule')
  umis <- umis[pos < end]
  umis[, reads.plus := reads ]
  umis[, reads.minus := umis.m[umis, reads, on=c("gene", "sample", "pos", "end", "umi")] ]
  umis[, reads := NULL ]
  umis <- umis[is.finite(reads.plus) & is.finite(reads.minus)]
  # Use reads.plus and reads.minus as separate (independent) read counts
  reads.expr <- expression(c(reads.plus, reads.minus))
  group.expr <- c(reads.plus,reads.minus) ~ sample + gene
} else if (ARGS$`filter-strand-umis`) {
  # We remove UMIs that are not part of a reciprocal pair, but keep the
  # constituing UMIs of each pair as separate UMIs (unlike combine-strand-umis)
  message('*** Filtering UMIs whose reciproal UMI belong to the other strand is missing')
  umis[, reads.other := umis.m[umis, reads, on=c("gene", "sample", "pos", "end", "umi")] ]
  umis <- umis[is.finite(reads) & is.finite(reads.other)]
  # Simply use "reads" columns as read counts
  reads.expr <- expression(reads)
  group.expr <- reads ~ sample + gene
} else {
  # Simply use "reads" columns as read counts
  reads.expr <- expression(reads)
  group.expr <- reads ~ sample + gene
}

# ******************************************************************************
# *** Filter with read-count threshold *****************************************
# ******************************************************************************
# When applying the threshold, we filter based on the strand--specific counts, and
# require BOTH to be sufficiencly large.
if (ARGS$threshold > 0) {
  message('*** Filtering UMIs with fewer than ', ARGS$threshold, ' reads')
  umis.prefilter <- umis
  umis <- if (ARGS$`combine-strand-umis`)
    umis[(reads.plus >= ARGS$threshold) & (reads.minus >= ARGS$threshold)]
  else
    umis[reads >= ARGS$threshold]
}

# ******************************************************************************
# *** Output final UMI table ***************************************************
# ******************************************************************************
if (!is.null(ARGS$`output-final-umis`)) {
  f <- open_byext(ARGS$`output-final-umis`, open='w')
  write.table(umis, file=f,
              col.names=TRUE, row.names=FALSE, sep="\t", quote=FALSE)
  close(f)
}

# ******************************************************************************
# *** Report final UMI count ***************************************************
# ******************************************************************************
message(nrow(umis), ' UMIs remained for ', length(levels(umis$gene)), ' genes in ',
        length(unique(umis$sample)), ' samples after applying filters')
if (nrow(umis) < 2)
  stop("Too few UMIs to continue")

# ******************************************************************************
# *** Determine expression for the loss ****************************************
# ******************************************************************************
# Usually, this is simply "p0", i.e. the probability of an UMI having fewer than
# T (threshold) reads. But when we're dealing with stranded UMIs, an UMI is
# filtered out if *either* one of the two reciprocal mates have fewer than T
# reads (in combine-strand-umis mode), or if the UMI has fewer than T reads and
# the mate has zero reads (in filter-strand-umis mode).
loss.expr <- if (ARGS$`combine-strand-umis`) {
  # We filter UMIs which either have fewer than T reads, or whose reciprocal
  # mate has fewer than T reads
  expression(1 - (1 - p0)^2)
} else if (ARGS$`filter-strand-umis`) {
  # We filter UMIs whose reciprocal mate wasn't detected (0 reads), or
  # which have fewer than T reads.
  expression(1 - (1 - p0) * (1 - dgwpcrpois(0, threshold=0, molecules=ARGS$molecules,
                                            efficiency=efficiency, lambda0=lambda0)))
} else
  # Each UMI is treated individually, the loss is simply p0
  expression(p0)

# ******************************************************************************
# *** Fit global model *********************************************************
# ******************************************************************************
message('*** Fitting global PCR and sequencing model')
library(gwpcR)
gm <- gwpcrpois.mom(mean(umis[, eval(reads.expr)], na.rm=TRUE),
                    var(umis[, eval(reads.expr)], na.rm=TRUE),
                    threshold=ARGS$threshold, molecules=ARGS$molecules)
gm.loss <- eval(loss.expr, envir=list2env(gm, parent=parent.frame()))
message('Overall efficiency ', round(100*gm$efficiency), '%, depth ',
        round(gm$lambda0, digits=3), ' reads/UMI, loss ', round(100*gm.loss), '%')

# ******************************************************************************
# *** Open Plot Output PDF File ************************************************
# ******************************************************************************
if (!is.null(ARGS$`output-plots`)) {
  message('*** Opening PDF ', ARGS$`output-plots`, ' for plot output')
  pdf(file=ARGS$`output-plots`, onefile=TRUE, height=3.5, width=5.5)
}

# ******************************************************************************
# *** Plot global reads/UMI distribution ***************************************
# ******************************************************************************
if (!is.null(ARGS$`output-plots`)) {
  message('*** Plotting reads/UMI distribution')
  counts <- umis[, eval(reads.expr)]
  counts.prefilter <- umis.prefilter[, eval(reads.expr)]
  x.bin <- ifelse(!is.null(ARGS$`plot-hist-bin`),
                  ARGS$`plot-hist-bin`,
                  max(1, floor(max(counts) / nclass.Sturges(counts))))
  h.breaks <- seq(from=0,
                  to=x.bin*ceiling(max(counts)/x.bin),
                  by=x.bin)
  x.max <- ifelse(!is.null(ARGS$`plot-hist-xmax`),
                  ARGS$`plot-hist-xmax`,
                  max(h.breaks))
  # Setup plotting
  par(mar=c(3.1, 2.1, 1.1, 0.2))
  # Plot phantoms if requested
  if (!ARGS$`plot-skip-phantoms`) {
    hist(counts.prefilter, freq = TRUE, right = FALSE,
         xlim=c(0, x.max), breaks=h.breaks,
         border="grey", xlab="", ylab="", yaxt="n", main="")
  }
  # Plot main histogram
  h <- hist(counts, freq = TRUE, right = FALSE,
            xlim=c(0, x.max), breaks=h.breaks,
            add=TRUE)
  # Plot model
  p <- diff(ifelse(h$breaks > 0,
                   pgwpcrpois(pmax(h$breaks - 1, 0), threshold=0,
                              molecules=gm$molecules,
                              efficiency=gm$efficiency,
                              lambda0=gm$lambda0) /
                     (1 - gm$p0),
                   0))
  points(h$mids, p * length(counts), pch=16, cex=0.7, xpd=TRUE,
         col=ifelse(h$breaks >= ARGS$threshold, 'black', 'red'))
  # Plot Loss
  text(ARGS$threshold/2, par('usr')[4], adj=c(1.0,0.5),
       paste0("Loss=", format(100*gm.loss, digits=2), '%'),
       col='red', srt=90, xpd=TRUE)
  # Plot Threshold
  lines(c(ARGS$threshold, ARGS$threshold), c(0, par("usr")[4]*2), lwd=2, xpd=TRUE)
  text(ARGS$threshold, par('usr')[4], adj=c(-0.1, 0), xpd=TRUE,
       paste0("Th.=", ARGS$threshold))
  # Plot Model Parameters
  text(par("usr")[2], par("usr")[4], adj=c(1.0, 0), xpd=NA,
       paste0('Eff.=', round(100*gm$efficiency), '%'))
  # Plot X-Axis
  mtext(side=1, line=2, 'x (Reads)')
  # Plot Y-Axis
  axis(side=2, line=0, at=c(0, par("usr")[4]), labels=NA)
  mtext(side=2, line=1, '#UMIs with x reads')
}

# ******************************************************************************
# *** Fit gene-wise models *****************************************************
# ******************************************************************************
# XXX: In combine-strand-umis mode, we should use reads.plus and reads.minus as
# separate samples!
message('*** Fitting gene-wise models on ', ARGS$cores, ' cores')
gsm <- gwpcrpois.mom.groupwise(group.expr, data=umis,
                               threshold=ARGS$threshold, molecules=ARGS$molecules,
                               loss=loss.expr,
                               ctrl=list(cores=ARGS$cores,
                                         var.est.distfree=ARGS$`var-est-distfree`,
                                         obs.min.ingroup=ARGS$`genewise-min-umis`))
if (!is.null(ARGS$`output-genewise-fits`)) {
  f <- open_byext(ARGS$`output-genewise-fits`, open='w')
  write.table(gsm, file=f, col.names=TRUE, row.names=FALSE, sep="\t", quote=FALSE)
  close(f)
}
umicounts <- gsm[, list(sample, gene, n.umis, n.tot,
                        efficiency, depth=lambda0, loss, n.obs)]

# ******************************************************************************
# *** Plot loss estimate variances over number of observations  ****************
# ******************************************************************************
if (!is.null(ARGS$`output-plots`)) {
  # Split d into plot-var-bins bins with similar n.obs, for n.obs > 1
  gsmp <-  gsm[order(n.obs), ][n.obs > 1,]
  gsmp[is.finite(loss.raw)
       , bin := floor(seq(from=1, to=(1-.Machine$double.neg.eps)*ARGS$`plot-var-bins`,
                          length.out=.N)) ]
  # Compute loss variance within bins
  gsm.bin <- gsmp[is.finite(bin)
                  , list(n.obs=mean(n.obs, na.rm=TRUE),
                         loss.raw.var=var(loss.raw, na.rm=TRUE))
                  , by=bin]
  # Extract between-group variance s and baseline estimator error u
  u <- gsm[1, loss.raw.var * n.obs]
  s <- gsm[1, loss.grp.var]
  # Setup plot
  par(mar=c(4.1,4.1,1.1,1.1))
  plot.new()
  xlim=range(c(1, gsm.bin$n.obs))
  plot.window(xlim=xlim,
              ylim=range(c(gsm.bin$loss.raw.var, s+u/2,
                           ifelse(ARGS$`plot-var-logy`, NA, 0)),
                         na.rm=TRUE),
              log=ifelse(ARGS$`plot-var-logy`, 'xy', 'x'))
  axis(side=1)
  axis(side=2)
  title(xlab=ifelse(ARGS$`strand-umis`,
                    "# Strand UMIs / Gene",
                    "# UMIs / Gene"),
        ylab=expression("Total Variance of Loss Estimates"))
  legend('topright', lty=c(NA, 2), pch=c(4, NA),
         c('Empirical', 'Prediction s + u/n'), bty='n')
  # Plot bin-wise empirical loss variance
  gsm.bin[, points(n.obs, loss.raw.var, pch=4) ]
  # Plot prediction
  x <- seq(from=xlim[1], to=xlim[2], length.out=1000)
  lines(x, s + u/x, lty=2)
}

# ******************************************************************************
# *** Close Plot Output PDF File ***********************************************
# ******************************************************************************
if (!is.null(ARGS$`output-plots`)) {
  d <- dev.off()
}

# ******************************************************************************
# *** Output count table *******************************************************
# ******************************************************************************
if (!is.null(ARGS$`output-counts`)) {
  f <- open_byext(ARGS$`output-counts`, open='w')
  write.table(umicounts, file=f,
              col.names=TRUE, row.names=FALSE, sep="\t", quote=FALSE)
  close(f)
}
